<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://code.alibabatech.com/schema/dubbo  http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:annotation-config />
	<context:component-scan base-package="org.androidpn.server.**,com.cmri.bpt.service.token">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 将多个配置文件位置放到列表中 -->
	<bean id="propertyResources" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<!-- database config -->
				<value>classpath:conf/database.properties</value>
			</list>
		</constructor-arg>
	</bean>
	<!-- 将配置文件读取到容器中，交给Spring管理 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" ref="propertyResources" />
	</bean>
	
	

	<!-- *******************************AndroidPN Bean Configure  begin************************************* -->
			<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
				<property name="customEditors">
					<map>
						<entry key="java.net.SocketAddress"
							value="org.apache.mina.integration.beans.InetSocketAddressEditor" />
					</map>
				</property>
			</bean>
		
			<bean id="xmppHandler" class="org.androidpn.server.xmpp.net.XmppIoHandler" />
		
			<bean id="filterChainBuilder"
				class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
				<property name="filters">
					<map>
						<entry key="executor">
							<bean class="org.apache.mina.filter.executor.ExecutorFilter" />
						</entry>
						<entry key="codec">
							<bean class="org.apache.mina.filter.codec.ProtocolCodecFilter">
								<constructor-arg>
									<bean class="org.androidpn.server.xmpp.codec.XmppCodecFactory" />
								</constructor-arg>
							</bean>
						</entry>
						<!-- <entry key="logging"> <bean class="org.apache.mina.filter.logging.LoggingFilter" 
							/> </entry> -->
					</map>
				</property>
			</bean>
			<bean id="ioAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor"
				init-method="bind" destroy-method="unbind" scope="singleton">
				<property name="defaultLocalAddress" value=":5133" />
				<property name="handler" ref="xmppHandler" /><!-- 接收到client消息后可以在此类中处理 -->
				<property name="filterChainBuilder" ref="filterChainBuilder" />
				<property name="reuseAddress" value="true" />
			</bean>
		
			<bean id="getSessionConfig" factory-bean="ioAcceptor"
				factory-method="getSessionConfig">
				<!--服务器启动心跳监听的时间 -->
				<property name="readerIdleTime" value="120"></property>
			</bean>
		
			<bean id="serviceLocator" class="org.androidpn.server.service.ServiceLocator"
				scope="singleton" />
	<!-- ************************************************AndroidPN Bean Configure End*************************************************** -->

	<import resource="classpath*:conf/applicationContext-ibatis.xml" />
	
	
	
	
	<!--***********************************dubbo暴露服务配置开始************************************ -->
        <!-- 具体的实现bean -->  
      <!--   <bean id="notificationService" class="org.androidpn.server.service.impl.NotificationServiceImpl" />   -->
      
        <!-- 提供方应用信息，用于计算依赖关系 -->  
        <dubbo:application name="bpt-push" />  
      
        <!-- 使用zookeeper注册中心暴露服务地址即zookeeper的所在服务器ip地址和端口号 -->  
		<dubbo:registry  address="zookeeper://127.0.0.1:2181"/><!-- zookeeper注册中心的地址 -->
        
      
        <!-- 用dubbo协议在20880端口暴露服务 -->  
        <dubbo:protocol name="dubbo" port="20880" /><!--   该服务自己本身的地址[即消费者会从上面的zookeeper注册中心找到该地址，然后访问该地址调用服务，dubbo底层可能使用tcp协议的Netty框架] -->
      
        <!-- 声明需要暴露的服务接口 -->  
        <dubbo:service interface="org.androidpn.server.service.NotificationService" ref="notificationService" />  
	<!--***********************************dubbo暴露服务配置结束************************************ -->
</beans>
